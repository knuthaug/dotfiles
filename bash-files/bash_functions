alias what-to-push="git diff --stat origin/master HEAD"
alias lg="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit"


alias gff="git flow feature"
alias gfr="git flow release"
alias gfh="git flow hotfix"
alias gfs="git flow support"
alias gc="git commit"
alias gs="git stash"
alias gsp="git stash pop"
alias rebase-me="git rebase -i \$(git merge-base HEAD master)"

alias gp="git pull"
alias gpp="git pull && git push"
alias master="git checkout master"
alias g="git status"
alias gap="git add --patch"
alias gca='git commit --amend --no-edit'
alias glog="git log --oneline --decorate"
alias merge="gh pr merge --squash"
alias gpr="gh pr"
alias mkdir="mkdir -pv"
#alias ls="ls -lap"

#kubernetes
alias k="kubectl"
#alias "kc"="kubectl config use-context"

function kc() {
  #echo "1=$1"
  #echo "2=$2"
  if [ "$1" == "set" ]; then
    kubectl config use-context $2
  else 
    kubectl config current-context
  fi
}

function startbranch() {
    git checkout -b "$1"
    git push -u origin "$1"
}

alias debug-head="GET -Sed -H 'X-Debug: true' "
alias debug-head="GET -Sed -H 'X-Debug: true' "
alias debug-head="GET -Sed -H 'X-Debug: true'"

alias antlr4='java -jar /usr/local/lib/antlr-4.5.3-complete.jar'
alias grun='java org.antlr.v4.gui.TestRig'



function docker_cleanup() {
  docker images --no-trunc| grep none | awk '{print $3}' | xargs -r docker rmi -f
}

function clean() {
    find . -name \*~ | xargs rm
    find . -name #\* | xargs rm
    find . -name \.#\* | xargs rm
}

function get_branch() {
    branch=`git status| grep 'On branch' | cut -f 4 -d' '`
    if [ -z $branch ] 
    then
        echo "master"
    else
        echo $branch 
    fi
}



function gcom() {
    echo "committing changes for all previously tracked files"
    git commit -a
}

function gpush() {
    branch=`get_branch`
    echo "pushing to origin branch $branch"
    git push origin $branch

}
function gpull() {
    branch=`get_branch`
    echo "pulling from origin branch $branch"
    git pull origin $branch    
}

function gfm() {
    git fetch origin master
}

function goto() {
  len=`expr "$1" : '.*'`
  re='^[0-9]+$'
  isnumber=0

  if  [[ $1 =~ $re ]]; then
    isnumber=1
  fi

  if [[ $len -eq 4 ]]  && [[ $isnumber -eq 1 ]]; then
    gh pr checkout $1
  else
    git checkout $1
  fi
}

function epoch() {
  node -e 'let e = process.argv[1]; if(e.length === 10) { e = e * 1000 }; console.log(`epoch ${e} -> ${new Date(+e)}`);' $1
}
